<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java调优 on 超级阵雨的乌托邦星球</title>
    <link>https://zhenyu0324.github.io/tags/java%E8%B0%83%E4%BC%98/</link>
    <description>Recent content in java调优 on 超级阵雨的乌托邦星球</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 26 Feb 2021 10:17:05 +0800</lastBuildDate>
    
	<atom:link href="https://zhenyu0324.github.io/tags/java%E8%B0%83%E4%BC%98/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java性能调优3</title>
      <link>https://zhenyu0324.github.io/post/javaoptimize3/</link>
      <pubDate>Fri, 26 Feb 2021 10:17:05 +0800</pubDate>
      
      <guid>https://zhenyu0324.github.io/post/javaoptimize3/</guid>
      <description>1.多线程之锁优化 1.1 深入了解Synchronized同步锁的优化方法 在并发编程中，多个线程访问同一个共享资源时，我们必须考虑如何维护数据的原</description>
    </item>
    
    <item>
      <title>Java性能调优2</title>
      <link>https://zhenyu0324.github.io/post/javaoptimize2/</link>
      <pubDate>Wed, 24 Feb 2021 19:51:41 +0800</pubDate>
      
      <guid>https://zhenyu0324.github.io/post/javaoptimize2/</guid>
      <description>Java性能调优2 &amp;mdash;- Java编程性能调优 1. 字符串性能优化 String 对象是我们使用最频繁的一个对象类型，但它的性能问题却是最容易被忽略的。String</description>
    </item>
    
    <item>
      <title>Java性能调优1</title>
      <link>https://zhenyu0324.github.io/post/javaoptimize1/</link>
      <pubDate>Wed, 24 Feb 2021 18:16:39 +0800</pubDate>
      
      <guid>https://zhenyu0324.github.io/post/javaoptimize1/</guid>
      <description>1. 引言 1.1怎样才能做好性能调优 互联网时代，一个简单的系统就囊括了应用程序、数据库、容器、操作系统、网络等技术，线上一旦出现性能问题，就可能</description>
    </item>
    
  </channel>
</rss>